シラバスID,番号,大学名,学科名,科目,,対象,状態,備考,Dropbox link,1. Software Requirements,2. Software Architecture,3. Software Design,4. Software Construction,5. Software Testing,6. Software Engineering Operations,8. Software Configuration Management,7. Software Maintenance,9. Software Engineering Management,10. Software Engineering Process,11. Software Engineering Models and Methods,12. Software Quality,近藤気になったワード
1,2,Carnegie Mellon University,COMPUTER SCIENCE,Software Foundations of Security and Privacy,https://15316-cmu.github.io/2023/index.html,,作業中,春秋,"Security and privacy issues in computer systems continue to be a pervasive issue in technology and society. Understanding the security and privacy needs of software, and being able to rigorously demonstrate that those needs are met, is key to eliminating vulnerabilities that cause these issues. Students who take this course will learn the principles needed to make these assurances about software, and some of the key strategies used to make sure that they are correctly implemented in practice. Topics include: policy models and mechanisms for confidentiality, integrity, and availability, language-based techniques for detecting and preventing security threats, mechanisms for enforcing privacy guarantees, and the interaction between software and underlying systems that can give rise to practical security threats. Students will also gain experience applying many of these techniques to write code that is secure by construction.",,,,write code that is secure by construction,,,,,,,,"assurances, vulnerabilities",
2,2,Carnegie Mellon University,ELECTRICAL & COMPUTER ENGINEERING,Secure Software Systems,,,,春のみ,"Poor software design and engineering are the root causes of most security vulnerabilities in deployed systems today. Moreover, with code mobility now commonplace--particularly in the context of web technologies and digital rights management--system designers are increasingly faced with protecting hosts from foreign software and protecting software from foreign hosts running it. This class takes a close look at software as a mechanism for attack, as a tool for protecting resources, and as a resource to be defended. Topics covered include the software design process; choices of programming languages, operating systems, databases and distributed object platforms for building secure systems; common software vulnerabilities, such as buffer overflows and race conditions; auditing software; proving properties of software; software and data watermarking; code obfuscation; tamper resistant software; and the benefits of open and closed source development. Students in 18-335 will share lectures and homeworks with students in 18-732. However, 18-732 has additional requirements not shared by 18-335, including the requirement to produce scribe notes and to practice and demonstrate the ability to read and summarize scientific papers on the topics covered by the course.",,,software design,,,,,,,,,vulnerabilities,
3,2,Carnegie Mellon University,ELECTRICAL & COMPUTER ENGINEERING,Full-Stack Software Development for Engineers,,,,春のみ,"This course will introduce the principles, concepts, technologies, and practices of full-stack software development for creating end-to-end web applications using a classical client-server architecture and the model-view-controller pattern. Students will acquire basic front-end and back-end development skills and learn how to apply modern development practices in the context of an individual hands-on project using the plain web stack for the front-end, TypeScript and a NoSQL database layer for the back-end, and other common libraries, light-weight frameworks, and tools as adjuncts. The course will also introduce the fundamental software development concepts including types, objects, multi-paradigm programming (functional and object-oriented), modularity, concurrent and asynchronous computation, basic security, authentication and authorization, dynamic updates, and databases. Students will practice how to version-control the codebase, manage a small project, transform requirements expressed as user stories into working software in an incremental manner, maintain code quality using static analysis tools, build their application on an integration server, and deploy it on the cloud. To enroll in this course, students must already be proficient in imperative programming using multiple languages and familiar with the basics of algorithms and data structures. Each student will need their own laptop computer to use in the course.",transform requirements expressed as user stories into working software,"client-server architecture, model-view-controller pattern",,modularity,,deploy,"version-control,build their application",,manage a small project,,,maintain code quality using static analysis tools,"client-server architecture and the model-view-controller pattern, front-end and back-end development skills, build their application"
4,2,Carnegie Mellon University,ENGLISH,Software Documentation,,,,春のみ,"This course teaches theory, techniques, and best practices for creating software documentation. We will learn to plan, architect, write, and publish audience-appropriate user assistance, while applying concepts and approaches like minimalism, topic-oriented authoring, single-source publishing, content reuse, and metadata. Students will complete homework assignments and larger projects to reinforce principles and provide experience in all phases of the software documentation lifecycle. Readings and class discussion will bridge theory and practice. This course is for juniors and seniors only.",creating software documentation,,,,,,,software documentation,,,,,
5,2,Carnegie Mellon University,HUMAN-COMPUTER INTERACTION,Designing Human Centered Software,https://www.hcii.cmu.edu/course/designing-human-centered-software,,,春秋,"Why are things so hard to use these days? Why doesn't this thing I just bought work? Why is this web site so hard to use? These are frustrations that we have all faced from systems not designed with people in mind. The question this course will focus on is: how can we design human-centered systems that people find useful and usable? This course is an introduction to designing, prototyping, and evaluating user interfaces. If you take only one course in Human-Computer Interaction, this is the course for you. This class is a core course for undergrads in the HCI Minor but open to all undergrads and grad students, with either technical or non-technical backgrounds. We will cover theory as well as practical application of ideas from Human-Computer Interaction. Course work includes lectures, class discussion, homework, class presentations, and group project. Students will need a prerequisite of a fundamental computer programming course. This course can only be taken synchronously. Students in the HCI Minor and SCS concentration have priority registration for this course for graduation requirement purposes. When registering for this course, undergraduate students are automatically placed the wait list.",,,human-centered systems,,,,,,,,,,
6,2,Carnegie Mellon University,SOFTWARE & SOCIETAL SYSTEMS,"Principles of Software Construction: Objects, Design, and Concurrency	",https://cmu-17-214.github.io/f2021/,,,春のみ,"Software engineers today are less likely to design data structures and algorithms from scratch and more likely to build systems from library and framework components. In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, and program and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object-oriented programming, (3) static and dynamic analysis for programs, and (4) concurrency. At the conclusion of this course, students will have substantial experience building medium-sized software systems in Java. WAITLIST PROCESSING: Students with an SE minor will be considered first, followed by grade, and order you are on the waitlist.",,,object-oriented programming,construction of software systems,,,,,,,,,
7,2,Carnegie Mellon University,SOFTWARE & SOCIETAL SYSTEMS,Foundations of Software Engineering,,,,春秋,"Students gain exposure to the fundamental principles of software engineering. This includes both core CS technical knowledge and the means by which this knowledge can be applied in the practical engineering of complex software in real-world settings. Topics related to software artifacts include coding, software architecture, measurement, and quality assurance of various qualities (e.g., robustness, security, performance, maintainability) with static and dynamic analysis, testing, code review, and inspection. Topics related to software process include requirements engineering, process models and evaluation, personal and team development, and supply chain issues including outsourcing and open source. This course has a strong technical focus, a strong focus on developing team skills, and will include both written and programming assignments. Students will get experience with the latest software engineering tools and practices.",requirements engineering,software architecture,,coding,"testing, code review, and inspection",,,,,software process,,"measurement, quality assurance, testing",
8,2,Carnegie Mellon University,SOFTWARE & SOCIETAL SYSTEMS,Software Engineering for Startups,,,,春のみ,"Startup engineering is critical to innovation. The skills required to effectively prototype, launch, and scale products are vital to engineers everywhere, from fledgling companies founded in dorm rooms to local mid-size companies to internal startups from multi-national tech giants. However, developing software in a startup environment poses unique engineering challenges. These challenges include making and justifying foundational architectural and technical decisions despite extreme uncertainty; rapidly prototyping and evaluating new ideas and features, while building minimum viable products; prioritizing engineering effort in severely constrained environments; and communicating effectively both within a small engineering team and with internal and external non-technical stakeholders. This course teaches the skills necessary to engineer successfully in a startup environment, through lectures, group projects, case study discussions, and guest speakers drawn from experienced, practicing startup engineers. This is an engineering-focused course; no entrepreneurship background is required or expected. Students do not need to have a startup idea to participate fully.",,justifying foundational architectural and technical decisions,"rapidly prototyping, building minimum viable products",,,,,,,,,,
9,2,Carnegie Mellon University,SOFTWARE & SOCIETAL SYSTEMS,Software Engineering Practicum,,,,春秋,"This course is a project-based course in which students conduct a semester-long project for a real client in small teams. This is not a lecture-based course; after the first few weeks the course consists primarily of weekly team meetings with the course instructors, with teams making regular presentations on their software development process. Students will leave the course with a firsthand understanding of the software engineering realities that drive SE practices, will have concrete experience with these practices, and will have engaged in active reflection on this experience. After the course, students will have the teamwork, process, and product skills to be immediately competent in a software engineering organization, and will be able to evaluate the new processes and techniques they will encounter in the workplace.",,,,,,,,,,software development process,,,
10,2,Carnegie Mellon University,SOFTWARE & SOCIETAL SYSTEMS,Designing Large-scale Software Systems,,,,春のみ,"Design plays a crucial role in the success of a software product, as decisions made during the design stage have a long-lasting impact on qualities such as reliability, robustness, maintainability, scalability, and security. With the increasing use of AI-based programming tools (such as ChatGPT and Copilot), being able to effectively design large, complex software and reason about systems at scale will become highly sought-out skills in the software industry. This course teaches students how to design complex, large-scale software systems that are reliable, robust, and built to last. It introduces fundamental concepts and techniques for designing software to achieve qualities of a successful product (such as maintainability, scalability, and robustness) and to avoid catastrophic failures. After taking this course, students will be able to (1) systematically generate and explore design alternatives, (2) specify and evaluate design options using appropriate abstractions, and (3) communicate and critique design decisions with other members of large, multi-team organizations. The discussions of these concepts will be driven by case studies of past failures and successes in real-world software systems. The course will be hands-on and involve a semester-long project where the students will work in teams and collaborate with other teams to design, test, and deploy a complex software system. This course is aimed at both undergraduate and graduate students who are interested in the role of a software architect or designer in an organization.",,complex software system,generate and explore design,,,,,,,,,"impact on qualities such as reliability, robustness, maintainability, scalability, and security", AI-based programming tools (such as ChatGPT and Copilot)
11,2,Carnegie Mellon University,SOFTWARE & SOCIETAL SYSTEMS,"Principles of Software Construction: Objects, Design, and Concurrency",https://cmu-17-214.github.io/f2021/,,,春秋,"Software engineers today are less likely to design data structures and algorithms from scratch and more likely to build systems from library and framework components. In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, and program and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object-oriented programming, (3) static and dynamic analysis for programs, and (4) concurrency. At the conclusion of this course, students will have substantial experience building medium-sized software systems in Java. WAITLIST PROCESSING: Students with an SE minor will be considered first, followed by grade, and order you are on the waitlist.",,concepts of design for complex systems,object-oriented programming,construction of software systems,,,,,,,,,
12,2,Carnegie Mellon University,ELECTRICAL & COMPUTER ENGINEERING,Computer Systems and the Hardware-Software Interface,,,,秋のみ,"This course covers the design and implementation of computer systems from the perspective of the hardware software interface. The purpose of this course is for students to understand the relationship between the operating system, software, and computer architecture. Students that complete the course will have learned operating system fundamentals, computer architecture fundamentals, compilation to hardware abstractions, and how software actually executes from the perspective of the hardware/software boundary. The course will focus especially on understanding the relationships between software and hardware, and how those relationships influence the design of a computer system's software and hardware. The course will convey these topics through a series of practical, implementation-oriented lab assignments.",,computer architecture,design and implementation of computer systems,implementation-oriented,,,,,,,,,
13,2,Carnegie Mellon University,HUMAN-COMPUTER INTERACTION,Software Structures for User Interfaces,,,,秋のみ,"This course considers the basic and detailed concepts for building software to implement user interfaces (UIs). It considers factors of input, output, application interface, and related infrastructure as well as the typical patterns used to implement them. It considers how these aspects are organized and managed within a well-structured object oriented system. We will cover a variety of ""front-end"" programming contexts, including conventional graphical user interface (GUI) programming for mobile apps (phones, watches), web apps, and regular desktop applications, across a variety of frameworks. We will also cover programming for data-driven and conversational (AI) user interfaces. We will briefly touch on front-end programming for visualizations, games, 3D, and virtual and artificial reality (VR and AR), along with interactive UI tools such as prototypers and resource editors. The homeworks and project in this course will involve extensive object-oriented programming, likely in both Java and JavaScript, so this course is only appropriate for students with a strong programming background. Note that this is not an HCI methods course -- we do not cover user-centered design or evaluation methods. This course is designed for students in the SCS HCI undergrad Major, but it also available to any undergrad or graduate student with an interest in the topic and solid prior programming experience who wish to understand the structures needed for professional development of interactive systems. Note that all students who register for this class will initially be placed on a waitlist. Priority for getting into the class are students in the HCII programs (more senior students first), and then others. The graduate (05-631) and undergraduate (05-431) numbers are for the same course with the same work.",,,object oriented system,UI,,,,,,,,,
14,2,Carnegie Mellon University,SOFTWARE & SOCIETAL SYSTEMS,Software Engineering Reflection,,,,秋のみ,"This course is an opportunity to reflect on a software engineering experience you have had in industry. It is structured as a writers workshop, in which you will work with the instructor and other students to identify and flesh out a software engineering theme that is illustrated by your industry experience. You will prepare a 10-page report on this theme, comparable to a practitioner's report at a conference like ICSE or OOPSLA, and a 30-minute presentation to match. This course fulfills a requirement of the Software Engineering Minor program, but students in other programs may take the course if they meet the prerequisite industry experience and if space is available.",,,,,,,,,,,,,
15,2,Carnegie Mellon University,SCS INTERDISCIPLINARY,Introduction to Software Construction,,,,秋のみ,"Writing software can be very challenging. While software is often written to solve difficult problems, or implement complex algorithms, there are also challenges in the writing of software itself. In this course, students will learn the software construction skills that will help them throughout their career, both as students, and beyond. Students should expect to learn how to decompose an assignment/problem into subtasks, how to track their progress using milestones, evaluating sub regions of code for correctness, as well as finding and fixing faults in code. Students should expect to participate in a variety of in class activities, as well as work on a project implementing the skills they are learning in class.",,,,learn the software construction skills,,,,,,,,,
16,12,Purdue University,,Visual Design For Software,https://catalog.purdue.edu/search_advanced.php?catoid=17,分析対象外,,探せない,,,,,,,,,,,,,,
17,15,Università della Svizzera italiana,,Software Analysis,,分析対象外,,修士,https://search.usi.ch/en/courses/35270719/software-analysis,,,,tools,,,,,,,,,
18,15,Università della Svizzera italiana,,Software Performance,,分析対象外,,修士,https://search.usi.ch/en/courses/35270704/software-performance,,,,,,,,,,,,,
19,15,Università della Svizzera italiana,,Software Architecture,,分析対象外,,修士,https://search.usi.ch/en/courses/35270713/software-architecture,,Architectural Modeling,Modularity,Interfaces,,,,,,,,,
20,15,Università della Svizzera italiana,,Software Design & Modeling,,分析対象外,,修士,https://search.usi.ch/en/courses/35270708/software-design-modeling,,,object-oriented design mechanisms,,,,,,,,,,
,15,Università della Svizzera italiana,,Software Atelier 4: Software Engineering Project,,,,,https://search.usi.ch/en/courses/35270750/software-atelier-4-software-engineering-project,the basics of requirements engineering,,,,testing,"DevOps, CI/CD",,,,,,software quality,
,15,Università della Svizzera italiana,,Software Atelier 3: The Web,,,,,https://search.usi.ch/en/courses/35270748/software-atelier-3-the-web,,"client/server programming, model-view-controller",,"REST and HTTP, CSS3, HTML5, JSON",,,,,,,,,
,15,Università della Svizzera italiana,,Software Atelier 5: Field Project,,,,,https://search.usi.ch/en/courses/35270755/software-atelier-5-field-project,,,,,,,,,,,,,
,15,Università della Svizzera italiana,,Software Atelier 1: Fundamentals of Informatics,,,,,https://search.usi.ch/en/courses/35270747/software-atelier-1-fundamentals-of-informaticss,,,,,,,Versioning,,,,,,
21,17,National University of Singapore,,Software Development Fundamentals,,分析対象外,,,https://inetapps.nus.edu.sg/SACS/LifeLongLearning/CourseDetails/IT5001_TGS-2020502315/,,,,,,,,,,,,,
22,17,National University of Singapore,,Software Security,,分析対象外,,,https://inetapps.nus.edu.sg/SACS/LifeLongLearning/CourseDetails/CS5439_TGS-2020502890/,,,,,,,,,,,,,
23,17,National University of Singapore,,Architecting Software Solutions,,分析対象外,,,ない．コースがなくなった？,,,,,,,,,,,,,
24,11,Univ. of California - Irvine,,Software Engineering,https://catalogue.uci.edu/allcourses/swe/,分析対象外,,,,,,,,,,,,,,,,
25,11,Univ. of California - Irvine,,Software Architecture,,分析対象外,,,,,,,,,,,,,,,,
26,11,Univ. of California - Irvine,,Human Aspects of Software Engineering,,分析対象外,,,,,,,,,,,,,,,,
27,11,Univ. of California - Irvine,,Software Testing and Debugging,,分析対象外,,,,,,,,,,,,,,,,
28,11,Univ. of California - Irvine,,Distributed Software Architecture,,分析対象外,,,,,,,,,,,,,,,,
29,11,Univ. of California - Irvine,,Software Security and Dependability,,分析対象外,,,,,,,,,,,,,,,,
30,59,TU Wien,,Advanced Software Engineering	,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=9890&dsrid=479&semester=2025S&courseNr=188910,,architectures of large software systems,Software design patterns ,,testing,Continuous integration,Advanced build management ,,Lifecycle management ,Software Lifecycle ,,"System size and complexity 
System dependability, Quality of Service (QoS) ",
31,59,TU Wien,,Calculation Software	,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=8114&dsrid=461&semester=2025S&courseNr=234178,,,,,,,,,,,,,
32,59,TU Wien,,"Design Studio ""Hardware and Software in Architecture""",,分析対象外,,建築学っぽい,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=9089&dsrid=508&semester=2025S&courseNr=253N32,,,,,,,,,,,,,
33,59,TU Wien,,Management of Software Projects,,,,プロジェクト演習？,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=3536&dsrid=804&semester=2025S&courseNr=188407,,,,,,,,,cost calculation,,,Quality assurance and risk management,
34,59,TU Wien,,Operating Systems and Software Engineering for High Performance Computing Systems,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=6508&dsrid=963&semester=2025S&courseNr=360240,,,,,,,,,,,,,
35,59,TU Wien,,Seminar for Master Students in Software Engineering & Internet Computing,,分析対象外,,マスター,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=5690&dsrid=638&semester=2025S&courseNr=180777,,,,,,,,,,,,,
36,59,TU Wien,,Seminar in Software Engineering,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=2773&dsrid=672&semester=2025S&courseNr=194127,,,,,,,,,,,,,
37,59,TU Wien,,Software Engineering Project	,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=8960&dsrid=952&semester=2025S&courseNr=194149,,modern software architectures,Applying techniques for abstraction and modelling,Git,,,,,,,abstraction and modelling in software engineering,,
38,59,TU Wien,,Software Engineering Project	,,分析対象外,,かぶり,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=4376&dsrid=171&semester=2025S&courseNr=194148,,,,,,,,,,,,,
39,59,TU Wien,,Software Programming,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=5796&dsrid=922&semester=2025S&courseNr=362156,write appropriate documentation,,,,,,,,,,,,
40,59,TU Wien,,Software Quality Assurance,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=5802&dsrid=377&semester=2025S&courseNr=180764,requirements,,,,"review techniques，Derive test cases from requirements
Implement automated unit tests for a system
Implement test doubles for isolated testing",,,,,,,,
41,59,TU Wien,,Software Testing,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=1933&dsrid=947&semester=2025S&courseNr=188280,requirements,,,,,,,,,,,,
42,59,TU Wien,,Software for structural engineers,,分析対象外,,分野外？,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=5330&dsrid=153&semester=2025S&courseNr=242008,,,,,,,,,,,,,
43,59,TU Wien,,Software programming,,,,,https://tiss.tuwien.ac.at/course/courseDetails.xhtml?dswid=3635&dsrid=252&semester=2025S&courseNr=362108,,,,,,,,,,,,,
44,70,Massachusetts Institute of Technology,Electrical Engineering and Computer Science,Elements of Software Construction,https://ocw.mit.edu/,,,他学科は見ていない,https://ocw.mit.edu/courses/6-005-elements-of-software-construction-fall-2008/,,,object-oriented programming,implementation,"testing, test-case generation,coverage",,,,,,modeling,,
45,70,Massachusetts Institute of Technology,Electrical Engineering and Computer Science,Software Studio,,,,,https://ocw.mit.edu/courses/6-170-software-studio-spring-2013/,,,,,,,,,,,,,
46,70,Massachusetts Institute of Technology,Electrical Engineering and Computer Science,Software Construction,,,,,https://ocw.mit.edu/courses/6-005-software-construction-spring-2016/,specifications,,design patterns,Construction,testing,,,"easy to understand, and ready for change",,,,,
47,70,Massachusetts Institute of Technology,Electrical Engineering and Computer Science,Software Engineering for Web Applications,,,,,https://ocw.mit.edu/courses/6-171-software-engineering-for-web-applications-fall-2003/,,distributed computing,,,testing with users,,,,absurd development schedules,,,,
48,70,Massachusetts Institute of Technology,Electrical Engineering and Computer Science,Performance Engineering of Software Systems,,,,,https://ocw.mit.edu/courses/6-172-performance-engineering-of-software-systems-fall-2018/,,scalable systems,,,,,,,,,,,
49,70,Massachusetts Institute of Technology,Electrical Engineering and Computer Science,Laboratory in Software Engineering,,,,,https://ocw.mit.edu/courses/6-170-laboratory-in-software-engineering-fall-2005/,,,,,,,,,,,,,
50,89,University of Adelaide,Computer Science,COMPSCI 732 - 2024 Semester One - Course Outline,https://www.adelaide.edu.au/course-outlines/,,,,https://www.dropbox.com/scl/fi/p5lj29g1s0fe2b57j6aoz/COMPSCI-732-2024-Semester-One-Course-Outline.pdf?rlkey=ptilpwn3085fiinsvoay2fxtq&st=8kma9bs2&dl=0,,Software architecture,Software design,Software Development tools,,Operation,,,management tool,state-of-the-art software development,,high-quality software,
51,89,University of Adelaide,Computer Science,COMPSCI 701 - 2024 Semester Two - Course Outline,,,,,https://www.dropbox.com/scl/fi/nrb5iguyi0gh4tkql00pr/COMPSCI-701-2024-Semester-Two-Course-Outline.pdf?rlkey=2w3l4vt088rzswnc70vs6fm0q&st=22ni0th3&dl=0,,,,,"Test-driven development, testablity",,,maintainable software,lifetime cost,test-driven development,,software quality,
52,89,University of Adelaide,Computer Science,COMPSCI 331 - 2024 Semester One - Course Outline,,,,,https://www.dropbox.com/scl/fi/mvygrdos5c8enwplya4u6/COMPSCI-331-2024-Semester-One-Course-Outline.pdf?rlkey=sp75x07myd40jx0x2057k8pxp&st=do4cmmyw&dl=0,,,,,,deployment,System building,maitenance,management,develop large-scale software systems,,quality attributes,
53,89,University of Adelaide,Computer Science,COMPSCI 235 - 2024 Semester Two - Course Outline,,,,,https://www.dropbox.com/scl/fi/vai0ey4kkrcs3voduz8wo/COMPSCI-235-2024-Semester-Two-Course-Outline.pdf?rlkey=s38x7aod8h38g8u2kph1zxb99&st=tzk508as&dl=0,,,design pattern,,"software testing, code review",,Build tools,,,"processes, agile methodologies","agile methodologies, data modeling",quality assurance techniques,
54,89,University of Adelaide,Computer Science,COMPSCI 230 - 2024 Semester Two - Course Outline,,,,,https://www.dropbox.com/scl/fi/w8vrmf3fzi8r6ua8sfvxq/COMPSCI-230-2024-Semester-Two-Course-Outline.pdf?rlkey=5y4mlvbaz0n0mg8mpojzq2g85&st=hlkvdm5h&dl=0,UML,,"object-oriented programming, design",,,,,,,develop software applications,Modelling with UML,quality,
55,89,University of Adelaide,Computer Science,COMPSCI 230 - 2024 Semester One - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/lxibm2v3vziqbrd10j15l/COMPSCI-230-2024-Semester-One-Course-Outline.pdf?rlkey=c0yx0r4lytf3dbl2yb9r3p64u&st=qpwsgw1l&dl=0,,,,,,,,,,,,,
56,89,University of Adelaide,Computer Science,COMPSCI 130 - 2024 Summer School - Course Outline,,,,,https://www.dropbox.com/scl/fi/v21tpjzb4ullnykt409eb/COMPSCI-130-2024-Summer-School-Course-Outline.pdf?rlkey=bhbpvkzfcrflm2tpzpaidwkci&st=dao6bq9e&dl=0,,,,programming code,"testing, reviewing",,,,,"process, software development",,"testing, debugging",
57,89,University of Adelaide,Computer Science,COMPSCI 130 - 2024 Semester Two - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/1nkjlc9ae0ldx79pbal8t/COMPSCI-130-2024-Semester-Two-Course-Outline.pdf?rlkey=u9xl4b29ssdmgde5rbfawjf7x&st=x3sgyqkl&dl=0,,,,,,,,,,,,,
58,89,University of Adelaide,Computer Science,COMPSCI 130 - 2024 Semester One - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/yz3kgylupoff7zjwvrr9d/COMPSCI-130-2024-Semester-One-Course-Outline.pdf?rlkey=gcqo48r2764xehso8r6skjlxn&st=wi9icx2j&dl=0,,,,,,,,,,,,,
59,96-1,University of Auckland,Computer Science,COMPSCI 732 - 2024 Semester One - Course Outline,https://courseoutline.auckland.ac.nz/dco,分析対象外,,被り,https://www.dropbox.com/scl/fi/p5lj29g1s0fe2b57j6aoz/COMPSCI-732-2024-Semester-One-Course-Outline.pdf?rlkey=ptilpwn3085fiinsvoay2fxtq&st=e4ofw31i&dl=0,,,,,,,,,,,,,
60,96-1,University of Auckland,Computer Science,COMPSCI 701 - 2024 Semester Two - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/nrb5iguyi0gh4tkql00pr/COMPSCI-701-2024-Semester-Two-Course-Outline.pdf?rlkey=2w3l4vt088rzswnc70vs6fm0q&st=1lwzxa1r&dl=0,,,,,,,,,,,,,
61,96-1,University of Auckland,Computer Science,COMPSCI 331 - 2024 Semester One - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/mvygrdos5c8enwplya4u6/COMPSCI-331-2024-Semester-One-Course-Outline.pdf?rlkey=sp75x07myd40jx0x2057k8pxp&st=nvz87215&dl=0,,,,,,,,,,,,,
62,96-1,University of Auckland,Computer Science,COMPSCI 235 - 2024 Semester Two - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/vai0ey4kkrcs3voduz8wo/COMPSCI-235-2024-Semester-Two-Course-Outline.pdf?rlkey=s38x7aod8h38g8u2kph1zxb99&st=0ueysbcf&dl=00,,,,,,,,,,,,,
63,96-1,University of Auckland,Computer Science,COMPSCI 230 - 2024 Semester Two - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/w8vrmf3fzi8r6ua8sfvxq/COMPSCI-230-2024-Semester-Two-Course-Outline.pdf?rlkey=5y4mlvbaz0n0mg8mpojzq2g85&st=y7ihitpy&dl=0,,,,,,,,,,,,,
64,96-1,University of Auckland,Computer Science,COMPSCI 230 - 2024 Semester One - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/lxibm2v3vziqbrd10j15l/COMPSCI-230-2024-Semester-One-Course-Outline.pdf?rlkey=c0yx0r4lytf3dbl2yb9r3p64u&st=ht39s18s&dl=0,,,,,,,,,,,,,
65,96-1,University of Auckland,Computer Science,COMPSCI 130 - 2024 Summer School - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/v21tpjzb4ullnykt409eb/COMPSCI-130-2024-Summer-School-Course-Outline.pdf?rlkey=bhbpvkzfcrflm2tpzpaidwkci&st=ilvxv9rt&dl=0,,,,,,,,,,,,,
66,96-1,University of Auckland,Computer Science,COMPSCI 130 - 2024 Semester Two - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/1nkjlc9ae0ldx79pbal8t/COMPSCI-130-2024-Semester-Two-Course-Outline.pdf?rlkey=u9xl4b29ssdmgde5rbfawjf7x&st=9pjahzqf&dl=0,,,,,,,,,,,,,
67,96-1,University of Auckland,Computer Science,COMPSCI 130 - 2024 Semester One - Course Outline,,分析対象外,,被り,https://www.dropbox.com/scl/fi/yz3kgylupoff7zjwvrr9d/COMPSCI-130-2024-Semester-One-Course-Outline.pdf?rlkey=gcqo48r2764xehso8r6skjlxn&st=o2mu162c&dl=0,,,,,,,,,,,,,
68,96-2,University of Birmingham,"Elec, Elec & Sys Engineering",LI Multidisciplinary Systems and Software Engineering,,,,,https://www.dropbox.com/scl/fi/cdgbdv5dnpjlibv8djgci/LI-Multidisciplinary-Systems-and-Software-Engineering.pdf?rlkey=3cb17fnctrnvd1dgwt1phy8t5&st=hgw5e9sf&dl=0,Identify requirements,create software architecture,,tools,Software Verification and Valiation,,Manage System Change,software engineering management,manage,software process,formal coding methods,"system risks, software quality attributes",
69,96-2,University of Birmingham,Mathematics,LI Statistical Software,,分析対象外,,統計の授業,https://www.dropbox.com/scl/fi/78omutgt2z7kb90xz5r64/LI-Statistical-Software.pdf?rlkey=ivrihzriuo0z29xoxxygfxxy3&st=bkznimnf&dl=0,,,,,,,,,,,,,
70,96-2,University of Birmingham,Computer Science,LI Software Engineering and Professional Practice,,,,,https://www.dropbox.com/scl/fi/xharte3wqvjx5y5gh1txj/LI-Software-Engineering-and-Professional-Practice.pdf?rlkey=rzv4sjfzs03xmgv8ai5hkmwpj&st=a6m06tft&dl=0,requirements,architecting,designing,,testing,,,,project management,,modeling,"software quality assurance, testing",
71,96-2,University of Birmingham,Computer Science,LI Software Engineering and Professional Practice,,分析対象外,,被り,https://www.dropbox.com/scl/fi/e3x2vb2moh9t6bquw6tqi/LI-Software-Engineering-and-Professional-Practice-1.pdf?rlkey=0x08iarlnbkjwilnq4bj50rjw&st=5s40grm3&dl=0,,,,,,,,,,,,,
72,96-2,University of Birmingham,Computer Science,LI Software Workshop 1,,,,,https://www.dropbox.com/scl/fi/2lfm9ae7cy5w3s9uz6amw/LI-Software-Workshop-1.pdf?rlkey=nl7c4ny4dmbkwy4kv65hzj2gp&st=05sdw96o&dl=0,,,"object oriented, design",,,,,,,,,program testing,
73,96-2,University of Birmingham,Computer Science,LI Software Workshop 2,,,,,https://www.dropbox.com/scl/fi/db1c5vvqqfaj6ezvbx8g0/LI-Software-Workshop-2.pdf?rlkey=16zgmcy08dqjhzc1v0mhem0sp&st=r2gblh40&dl=0,spesification,,object-oriented,build program,,,build program,,,,,,
74,96-2,University of Birmingham,Computer Science,LI Building Useable Software,,,,,https://www.dropbox.com/scl/fi/eu19cv62lyny751bm8m6m/LI-Building-Useable-Software-1.pdf?rlkey=5rojejv996nxf8610fnsdrrd6&st=xan2gdoj&dl=0,,,user-centered software design,,,,,,,software life cycle,,,
75,96-2,University of Birmingham,Computer Science,LI Building Useable Software,,分析対象外,,被り,https://www.dropbox.com/scl/fi/mufn8wzxufkk25816xo5f/LI-Building-Useable-Software-2.pdf?rlkey=0b31r5fdmjqtals5w0wdfggx5&st=ea6ynanx&dl=0,,,,,,,,,,,,,
76,96-2,University of Birmingham,Computer Science,LI Software Workshop 1,,分析対象外,,被り,https://www.dropbox.com/scl/fi/pe4fl8g8ormlrxzc9tcx3/LI-Software-Workshop-3.pdf?rlkey=ndfi1vu4p2hcfi3hqlo3dbbry&st=5nj34uzb&dl=0,,,,,,,,,,,,,
77,96-2,University of Birmingham,Computer Science,LI Software Workshop 2,,分析対象外,,被り,https://www.dropbox.com/scl/fi/elqf9ac4r9xagq7i2u1ec/LI-Software-Workshop-4.pdf?rlkey=jiwg1ygsde3gvmpj8nlszmuu5&st=y25gat85&dl=0,,,,,,,,,,,,,
78,96-2,University of Birmingham,"Elec, Elec & Sys Engineering",LI Multidisciplinary Systems and Software Engineering,,分析対象外,,,https://www.dropbox.com/scl/fi/nuqj5zylls3t82m4ft6v2/LI-Multidisciplinary-Systems-and-Software-Engineering-1.pdf?rlkey=ldrpsd47to0hbf2w6ywdg3326&st=gv0k1n7h&dl=0,,,,,,,,,,,,,
79,96-2,University of Birmingham,"Elec, Elec & Sys Engineering",LI Multidisciplinary Systems and Software Engineering,,分析対象外,,被り,https://www.dropbox.com/scl/fi/7zeencn2xi1suc5xvf3dl/LI-Multidisciplinary-Systems-and-Software-Engineering-2.pdf?rlkey=dfqhiwosqh1p4vcpiivc2zk65&st=pwwi7nm7&dl=0,,,,,,,,,,,,,
80,96-2,University of Birmingham,Computer Science,LH Intelligent Software Engineering,,,,,https://www.dropbox.com/scl/fi/pfwcwgvvrva1cvtnmdim4/LH-Intelligent-Software-Engineering.pdf?rlkey=ly5fnaahinz6ijvfw62w08u6k&st=6p5qedv7&dl=0,,,,,,,,,,,,,AI-powered
81,24,University College London,"Faculty of Engineering Sciences, Computer Science",Software Development Practice ,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/software-development-practice-COMP0104,,,,,,,,,,,,,
82,24,University College London,"Faculty of Engineering Sciences, Computer Science",Software Engineering,,,,,https://www.ucl.ac.uk/module-catalogue/modules/software-engineering-COMP0010,,Software Architecture,patterns of software design,,test-driven development,automated software testing,,,,,,"code quality,testing",
83,24,University College London,"Faculty of Engineering Sciences, Computer Science",Requirements Engineering and Software Architecture,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/requirements-engineering-and-software-architecture-COMP0101,,,,,,,,,,,,,
84,24,University College London,"Faculty of Engineering Sciences, Computer Science",Responsible Software Engineering,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/responsible-software-engineering--COMP0135,,,,,,,,,,,,,
85,24,University College London,"Faculty of Engineering Sciences, Computer Science",Research Methods in Software Engineering,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/research-methods-in-software-engineering-COMP0108,,,,,,,,,,,,,
86,24,University College London,"Faculty of Engineering Sciences, Computer Science",Automated Software Engineering,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/automated-software-engineering-COMP0237,,,,,,,,,,,,,
87,24,University College London,"Faculty of Engineering Sciences, Computer Science",Software Engineering,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/software-engineering-COMP0071,,,,,,,,,,,,,
88,24,University College London,"Faculty of Engineering Sciences, UCL School of Management",Software Engineering,,分析対象外,,学科違い,https://www.ucl.ac.uk/module-catalogue/modules/software-engineering-MSIN0019,,,,,,,,,,,,,
89,24,University College London,"Faculty of Engineering Sciences, Computer Science",Research Software Engineering with Python,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/research-software-engineering-with-python-COMP0233,,,,,,,,,,,,,
90,24,University College London,"Faculty of Engineering Sciences, Computer Science",Applied Software Engineering,,,,,https://www.ucl.ac.uk/module-catalogue/modules/applied-software-engineering-COMP0035,"modelling requirements, UML",,,the application could be developed,testing,DevOps,"select, install, configure",Refactoring,manage software development projects,software development processes,requirements gathering and modelling.,,
91,24,University College London,"Faculty of Engineering Sciences, Computer Science",Software Engineering and Product Management in Financial Technology,,分析対象外,,Master向け,https://www.ucl.ac.uk/module-catalogue/modules/software-engineering-and-product-management-in-financial-technology-COMP0201,,,,,,,,,,,,,
92,31,Virginia Tech,CS,Intro to Software Design,,,,14クラスある？シラバス内容は同じ？,"Fundamental concepts of programming from an object-oriented perspective. Basic software engineering principles and programming skills in a programming language that supports the object-oriented paradigm. Simple data types, control structures, array and string data structures, basic algorithms, testing and debugging. A basic model of the computer as an abstract machine. Modeling and problem-solving skills applicable to programming at this level. Partially duplicates 1054, 1124, and 1705.",,,,,,,,,,,data types,,
93,31,Virginia Tech,CS,Software Reverse Engineering,,,,説明のみ,"Theory and practice of software reverse engineering, static and dynamic analysis techniques and tools, reverse engineering of malware, obfuscated binaries, communications and command and control analysis, reverse engineering of non-binary software.",,,,,,,,,,,,,
94,31,Virginia Tech,CS,Mobile Software Development,,,,5クラスある？シラバス内容は同じ？,"Technologies and concepts underlying software development for mobile devices (handheld computers). Mobile computing platforms, including architecture, operating system, and programming environment. Software design patterns and structuring for mobile applications. Network-centric mobile software development. Data persistence. Programming for mobile device components such as cameras, recorders, accelerometer, gyroscope and antennas. Location-aware software development. A grade of C or better required in CS prerequisite.",,architecture,software design patterns and structuring for mobile applications,,,,,,, software development,,,
95,31,Virginia Tech,CS,AI Tools for Software Eng,,,,オンラインクラス,"Application of Artificial Intelligence and Machine Learning to the software development process. The course includes an introductory overview of relevant AI techniques, the use of large language models, and the construction of an AI assistant to help software engineers. Main emphasis is on exploring how developers can leverage generative AI to enhance the software development process, including generating code, reading, and analyzing code, and testing and documentation.",,,,"generating code,",testing,,,,,software development process,,,
96,31,Virginia Tech,CS,User Interface Software,,,,,"Survey of software architectures to build user interfaces, particularly focused on graphical user interfaces. Includes the design and implementation of user interfaces, the use of object-oriented application frameworks, software architecture for command undo, document management, layout managers, customized components, and separation of concerns in user interface software architectures. Discussion of research and advanced topics in User Interface Software.",,software architectures,design and implementation of user interfaces,UI,,,,,,,,,
97,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science	",Software Fundamentals,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67958&_NotifyTextSearch_,,,,,,"build environment, integrate code contributions",Git to version ,,,,,,
98,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science	",Software Systems,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67960&_NotifyTextSearch_,,,,,,,,,,,,,
99,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science	",Software Architecture,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=70106&_NotifyTextSearch_,,,,,,,,,,,,,
100,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Formal Reasoning about Software,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=70107&_NotifyTextSearch_,,,,,,,,,,,,,
101,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science	",Machine Learning for Software Engineering,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=70144&_NotifyTextSearch_,,,,,,,,,,,,,
102,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science	",Sustainable Software Engineering,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=70145&_NotifyTextSearch_,,,,,testing technique,,,,,,,,
103,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Automated Software Testing and Reverse Engineering,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=70420&_NotifyTextSearch_,,,,,,,,,,,,,
104,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Collaborative Software Engineering Project,,,,,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67561&_NotifyTextSearch_,,,,Gitlab,"testing, review",integrate testing in your process,Git to version,Write maintainable test code by avoiding well-known test code smells.,Manage a complex software project in a group,software engineering process,,,
105,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Software Quality and Testing,,,,,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67555&_NotifyTextSearch_,,,,,"property-based testing, test doubles and mock objects, design for testability, test-driven development, larger tests",,,,,test-driven development,,Software Quality,
106,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Software Project,,,,,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67567&_NotifyTextSearch_,requirements engineering,,,implementation,testing and validation, delivery of a working product,,,,software development,,,
107,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Software Engineering Methods,,,,,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67568&_NotifyTextSearch_,requirements engineering,software architecture,design patterns,,,,,,,software development,UML modeling,,
108,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Embedded Software,,,,,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67577&_NotifyTextSearch_,,,,,,,,,,,,,
109,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Robot Software Practicals,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67514&_NotifyTextSearch_,,,,,,,,,,,,,
110,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Software Engineering and Testing for AI Systems,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=70218&_NotifyTextSearch_,,,,,,,,,,,,,
111,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Software Engineering Methods,,分析対象外,,学び直し系？,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=68616&_NotifyTextSearch_,,,,,,,,,,,,,
112,33,TU Delft,"Electrical Engineering, Mathematics and Computer Science",Robot Software Practicals,,分析対象外,,修士,https://studiegids.tudelft.nl/a101_displayCourse.do?course_id=67514&_NotifyTextSearch_,,,,,,,,,,,,,
113,41,Iowa State University,Software engineering,Software Engineering Orientation,,,,,"Introduction to the procedures, policies, and resources of Iowa State University and the Software Engineering Program.",,,,,,,,,,,,,
114,41,Iowa State University,Software engineering,Careers in Software Engineering,,,,,"Overview of the nature and scope of the software engineering profession, relationship of coursework to careers, and program of study planning.",,,,,,,,,,,,,
115,41,Iowa State University,Software engineering,Software Project Management,,,,,"Process-based software development. Capability Maturity Model (CMM). Project planning, cost estimation, and scheduling. Project management tools. Factors influencing productivity and success. Productivity metrics. Analysis of options and risks. Version control and configuration management. Inspections and reviews. Managing the testing process. Software quality metrics. Modern software engineering techniques and practices",,,,,"testing, Inspections, reviews",,Version control and configuration management,,"Capability Maturity Model (CMM), cost estimation",,,Inspections and reviews. Managing the testing process. Software quality metrics.,
116,41,Iowa State University,Software engineering,Software Architecture and Design,,,,,"Modeling and design of software at the architectural level. Architectural styles. Basics of model-driven architecture. Object-oriented design and analysis. Iterative development and unified process. Design patterns. Design by contract. Component based design. Product families. Measurement theory and appropriate use of metrics in design. Designing for qualities such as performance, safety, security, reliability, reusability, etc. Analysis and evaluation of software architectures. Introduction to architecture definition languages. Basics of software evolution, reengineering, and reverse engineering. Case studies. Introduction to distributed system software.",,Architectural styles,Object-oriented design,,,,,,,,Modeling,,
117,41,Iowa State University,Software engineering,Software Development Practices,,,,,"Practical introduction to methods for managing software development. Software engineering concepts, practices and tools. Requirements analysis, structured and object-oriented design, coding, testing, and maintenance. Software process models, software tools and environments. Programming projects that provide exposure to information management techniques, client/server model, networking and communication.",,,,coding,,,,maintenance,,Software process models,,,
118,41,Iowa State University,Software engineering,Introduction to Software Testing,,,,,"Basic principles and techniques for software testing. Test requirements and management. Test design techniques, evaluation metrics, model-based testing, unit testing, system and integration testing. Software testing tools and programming projects.",,,,,"Test design techniques, evaluation metrics",,,,,,,,
119,41,Iowa State University,Software engineering,Software Architecture and Design,,分析対象外,,,"Modeling and design of software at the architectural level. Architectural styles. Basics of model-driven architecture. Object-oriented design and analysis. Iterative development and unified process. Design patterns. Design by contract. Component based design. Product families. Measurement theory and appropriate use of metrics in design. Designing for qualities such as performance, safety, security, reliability, reusability, etc. Analysis and evaluation of software architectures. Introduction to architecture definition languages. Basics of software evolution, reengineering, and reverse engineering. Case studies. Introduction to distributed system software.",,,,,,,,,,,,,
121,41,Iowa State University,Software engineering,Problem Solving in Software Engineering,,,,,"Introduction to software engineering and computer programming. Systematic thinking process for problem solving in the context of software engineering. Group problem solving. Solving software engineering problems and presenting solutions through computer programs, written documents and oral presentations. Introduction to principles of programming, software design, and extensive practice in design, writing, running, debugging, and reasoning about programs. Satisfactory placement scores can be found at: https://math.iastate.edu/academics/undergraduate/aleks/placement/. Graduation Restriction: Only one of ENGR 1600, ABE 1600, AERE 1600, BME 1600, CE 1600, CHE 1600, CPRE 1850, EE 1850, IE 1480, ME 1600, and SE 1850 may count towards graduation.",,,,,,,,,,,,,
122,41,Iowa State University,Software engineering,Software Testing,,,,,"An introduction to software testing principles and techniques. Test models, test design, test adequacy criteria; regression, integration, and system testing; and software testing tools.",,,,,"Test models, test design, test adequacy criteria, regression testing, integration testing, system testing; software testing tools.",,,,,,,,
123,41,Iowa State University,Software engineering,Introduction to Software Systems for Big Data Analytics,,,,,"Introduction to different perspectives of the “data universe” and trade-offs when choosing an appropriate perspective. Impact of the concept(s) of analytics – from raw data, through its storage/representation, to interacting and querying (linguistic/interface issues). Focused studies on 3-4 different domains, followed by generalization of the concepts/abstractions and preparing the students for the next course in this realm, targeting different domains/problems. Understanding the dependencies between problem-domain needs and the data properties, and their impact on choosing appropriate analytics tools (and how/why those tools were developed and exist in the manners that they do). In addition, the students will be exposed to (limited selection of) internals of such tools.",,,,,,,,,,,,,
124,41,Iowa State University,Software engineering,Software Analysis and Verification for Safety and Security,,,,,"Significance of software safety and security; various facets of security in cyber-physical and computer systems; threat modeling for software safety and security; and categorization of software vulnerabilities. Software analysis and verification: mathematical foundations, data structures and algorithms, program comprehension, analysis, and verification tools; automated vs. human-on-the-loop approach to analysis and verification; and practical considerations of efficiency, accuracy, robustness, and scalability of analysis and verification. Cases studies with application and systems software; evolving landscape of software security threats and mitigation techniques. Understanding large software, implementing software analysis and verification algorithms.",,,,,,,,program comprehension,,,,,
125,41,Iowa State University,Software engineering,Software Requirement Engineering,,,,,"The requirements engineering process including elicitation, requirements analysis fundamentals, requirements specification and communication, and requirements evaluation. Modeling of functional requirements and nonfunctional requirements, traceability, and requirements change management. Case studies and software projects.",The requirements engineering process,,,,,,,,,,,,
